package com.actonate.carrier_label_service.utils.helpers.bluedart;

//import com.actonate.carrier_label_service.utils.helpers.bluedart.*;
import com.actonate.carrier_label_service.utils.helpers.bluedart.org.tempuri.IWayBillGeneration;
import com.actonate.carrier_label_service.utils.helpers.bluedart.org.datacontract.schemas._2004._07.sapi_entities.*;
import com.actonate.carrier_label_service.utils.helpers.bluedart.org.datacontract.schemas._2004._07.sapi_entities_enums.ProductType;
import com.actonate.carrier_label_service.utils.helpers.bluedart.org.tempuri.WayBillGeneration;
import com.actonate.carrier_label_service.view_model.CarrierShipmentInfoViewModel;
import com.actonate.carrier_label_service.view_model.ProviderConfigViewModel;
import com.actonate.carrier_label_service.view_model.bluedart.BluedartLabelResponseViewModel;

import java.io.ByteArrayOutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.0
 *
 */
public class BluedartLabelGenerationHelper {



    public BluedartLabelResponseViewModel generate(CarrierShipmentInfoViewModel shipmentDetail, ProviderConfigViewModel config) throws Exception {
        try {
//            System.setProperty(
//                    "com.sun.xml.ws.transport.http.client.HttpTransportPipe.dump",
//                    "true");

System.out.println("----------Inside generate method of Bluedart!!");
            UserProfile userProfile = new UserProfile();
            WayBillGenerationRequest wayBillGenerationRequest = new WayBillGenerationRequest();

            com.actonate.carrier_label_service.utils.helpers.bluedart.org.datacontract.schemas._2004._07.sapi_entities.ObjectFactory objectFactory = new com.actonate.carrier_label_service.utils.helpers.bluedart.org.datacontract.schemas._2004._07.sapi_entities.ObjectFactory();

            Consignee consignee = new Consignee();
            JAXBElement<String> address1Value = objectFactory
                    .createConsigneeConsigneeAddress1("Flat201,MIG76");
            JAXBElement<String> address2Value = objectFactory
                    .createConsigneeConsigneeAddress2("DRC phase-2,HyderNagar");
            JAXBElement<String> address3Value = objectFactory
                    .createConsigneeConsigneeAddress3("HyderNagar,Hyderabad-500072");
//            JAXBElement<String> attentionValue = objectFactory
//                    .createConsigneeConsigneeAttention("Mr.");
            JAXBElement<String> mobileValue = objectFactory
                    .createConsigneeConsigneeMobile("09666712227");
            JAXBElement<String> nameValue = objectFactory
                    .createConsigneeConsigneeName("Nagesh Chintala");
            JAXBElement<String> pincodeValue = objectFactory
                    .createConsigneeConsigneePincode("400025");



            consignee.setConsigneeAddress1(address1Value);
            consignee.setConsigneeAddress2(address2Value);
            consignee.setConsigneeAddress3(address3Value);
//            consignee.setConsigneeAttention(attentionValue);
            consignee.setConsigneeMobile(mobileValue);
            consignee.setConsigneeName(nameValue);
            consignee.setConsigneePincode(pincodeValue);
            consignee.setConsigneeTelephone(objectFactory
                    .createConsigneeConsigneeTelephone("09666712227"));
            consignee.setConsigneeMobile(objectFactory
                    .createConsigneeConsigneeMobile("09666712227"));
            JAXBElement<Consignee> consigneeValue = objectFactory
                    .createConsignee(consignee);

            wayBillGenerationRequest.setConsignee(consigneeValue);


            System.out.println("-----consignee done!");

            Services services = new Services();

            services.setActualWeight(1.0);
            services.setCollectableAmount(0.0);

            CommodityDetail commodityDetail = new CommodityDetail();

            commodityDetail.setCommodityDetail1(objectFactory
                    .createCommodityDetailCommodityDetail1("Commodity 1"));
            commodityDetail.setCommodityDetail2(objectFactory
                    .createCommodityDetailCommodityDetail2("Commodity 2"));
            commodityDetail.setCommodityDetail3(objectFactory
                    .createCommodityDetailCommodityDetail3("Commodity 3"));
            //services.setCommodity(objectFactory
            //.createCommodityDetail(commodityDetail));

            services.setCommodity(objectFactory
                    .createServicesCommodity(commodityDetail));

            services.setCreditReferenceNo(objectFactory
                    .createServicesCreditReferenceNo("12345abdnn"));
            services.setDeclaredValue(12.0);

            System.out.println("-----services done!");

            ArrayOfDimension arrayOfDimension = new ArrayOfDimension();
            Dimension d = new Dimension();
            d.setBreadth(1.0);
            d.setCount(1);
            d.setHeight(1.0);
            d.setLength(1.0);
            arrayOfDimension.getDimension().add(d);

            services.setDimensions(objectFactory
                    .createServicesDimensions(arrayOfDimension));

            services.setInvoiceNo(objectFactory.createServicesInvoiceNo("12345"));
            services.setPackType(objectFactory.createServicesPackType(""));

            GregorianCalendar c = new GregorianCalendar();
            LocalDateTime now = LocalDateTime.now();

            String FORMATER = "yyyy-MM-dd";

            DateFormat format = new SimpleDateFormat(FORMATER);

            Date date = new Date();
            XMLGregorianCalendar gDateFormatted =
                    DatatypeFactory.newInstance().newXMLGregorianCalendar(format.format(date));
            System.out.println("---Date Experiment:::"+gDateFormatted);

            XMLGregorianCalendar gregFmt = DatatypeFactory.newInstance().newXMLGregorianCalendar(new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").format(new Date()));
            System.out.println("---Date Experiment 2:::"+gregFmt);
            System.out.println("---Date "+now.getYear() + now.getMonthValue() +now.getDayOfMonth());
            c.set(now.getYear(),now.getMonthValue() ,now.getDayOfMonth());
//            c.set(2022, 1 ,3);
            // c.setTime(yourDate);
            XMLGregorianCalendar date2;
            try {
                date2 = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);

                System.out.println("---Date 2:::"+date2 + ":::"+c);
                services.setPickupDate(gregFmt);
            } catch (DatatypeConfigurationException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();

            }

            services.setPickupTime(objectFactory.createServicesPickupTime("1800"));
            services.setPieceCount(1); //shipmentDetail.getShipmentItems().size()
            services.setProductCode(objectFactory.createServicesProductCode("A"));
            services.setProductType(ProductType.DUTIABLES);
            services.setSpecialInstruction(objectFactory
                    .createServicesSpecialInstruction("1"));
            services.setSubProductCode(objectFactory
                    .createServicesSubProductCode(""));

            wayBillGenerationRequest.setServices(objectFactory
                    .createServices(services));

            Shipper shipper = new Shipper();
            shipper.setCustomerAddress1(objectFactory
                    .createShipperCustomerAddress1("LETSSHAVE PVT. LTD, G.T. Road"));
            shipper.setCustomerAddress2(objectFactory
                    .createShipperCustomerAddress2("Near Amarpali Hotel"));
//            shipper.setCustomerAddress3(objectFactory
//                    .createShipperCustomerAddress3("1"));
            shipper.setCustomerCode(objectFactory
                    .createShipperCustomerCode("415925"));
            shipper.setCustomerMobile(objectFactory
                    .createShipperCustomerMobile("7027645824"));
            shipper.setCustomerEmailID(objectFactory
                    .createShipperCustomerEmailID("letsshave1@gmail.com"));
            shipper.setCustomerName(objectFactory.createShipperCustomerName("LETSSHAVE PVT. LTD"));
            shipper.setCustomerPincode(objectFactory
                    .createShipperCustomerPincode("134003"));
            shipper.setCustomerTelephone(objectFactory
                    .createShipperCustomerTelephone("7027645824"));
//            shipper.setIsToPayCustomer(false);
            shipper.setOriginArea(objectFactory.createShipperOriginArea("ABA"));
//            shipper.setSender(objectFactory.createShipperSender("xyz"));
//            shipper.setVendorCode(objectFactory.createShipperVendorCode(""));

            wayBillGenerationRequest.setShipper(objectFactory
                    .createShipper(shipper));

            System.out.println("-----shipper done!");

            JAXBElement<String> apiValue = objectFactory
                    .createUserProfileApiType("S");
            JAXBElement<String> custcodeValue = objectFactory
                    .createUserProfileCustomercode("415925");
            JAXBElement<String> licencekeyValue = objectFactory
                    .createUserProfileLicenceKey("cdb032a6daf6cd10814d86da652e9473");
            JAXBElement<String> loginidValue = objectFactory
                    .createUserProfileLoginID("AB415262");
            JAXBElement<String> versionValue = objectFactory
                    .createUserProfileVersion("1.10");

            userProfile.setApiType(apiValue);
//            userProfile.setArea(objectFactory.createUserProfileArea("HOR"));
            userProfile.setCustomercode(custcodeValue);
//            userProfile.setPassword(objectFactory.createUserProfilePassword(""));
//            userProfile.setIsAdmin(objectFactory.createUserProfileIsAdmin("N"));
            userProfile.setLicenceKey(licencekeyValue);
            userProfile.setLoginID(loginidValue);
            userProfile.setVersion(versionValue);

            com.actonate.carrier_label_service.utils.helpers.bluedart.org.tempuri.ObjectFactory objectFactory1 = new com.actonate.carrier_label_service.utils.helpers.bluedart.org.tempuri.ObjectFactory();
            JAXBElement<UserProfile> userProfileValue = objectFactory1
                    .createGenerateWayBillProfile(userProfile);

            JAXBElement<WayBillGenerationRequest> wayBillGenerationRequestValue = objectFactory
                    .createWayBillGenerationRequest(wayBillGenerationRequest);

            System.out.println("-----request done!"+wayBillGenerationRequest.toString());
            System.out.println("-----request value done!"+ toXml(wayBillGenerationRequestValue));

            URL u = new URL("https://netconnect.bluedart.com/Ver1.10/Demo/ShippingAPI/WayBill/WayBillGeneration.svc?wsdl");

            WayBillGeneration iwayTemp = new WayBillGeneration();
            System.out.println("---step0--" + iwayTemp);

//            WayBillGeneration iway1 = new WayBillGeneration(u, new QName("http://tempuri.org/","WayBillGeneration"));
//                System.out.println("---step1--" + iway1);
                IWayBillGeneration iway = iwayTemp.getWSHttpBindingIWayBillGeneration();

                System.out.println("---step2--" + iway);
                WayBillGenerationResponse response = iway.generateWayBill(
                        wayBillGenerationRequest, userProfile);

                System.out.println("---response--" + response);


            System.out.println(response.getAWBNo().getValue());
            System.out.println(response.getStatus().getValue().getWayBillGenerationStatus().get(0).getStatusInformation().getValue());
            BluedartLabelResponseViewModel bluedartResponse = new BluedartLabelResponseViewModel();

            bluedartResponse.setAwbPrintContent(response.getAWBPrintContent().getValue());
            bluedartResponse.setStatus(response.getStatus().getValue());
            bluedartResponse.setCcrcrdref(response.getCCRCRDREF().getValue());
            bluedartResponse.setDestinationArea(response.getDestinationArea().getValue());
            bluedartResponse.setDestinationLocation(response.getDestinationLocation().getValue());
            bluedartResponse.setIsError(response.isIsError());


            return bluedartResponse;
        } catch (Exception e) {
            System.out.println("Error level 2:"+ e);
            throw new Exception(e);
        }
    }

    public String toXml(JAXBElement element) {
        try {
            JAXBContext jc = JAXBContext.newInstance(element.getValue().getClass());
            Marshaller marshaller = jc.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            marshaller.marshal(element, baos);
            return baos.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }

}
